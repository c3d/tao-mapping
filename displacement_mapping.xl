// ****************************************************************************
//  displacement_mapping.xl                                         Tao project
// ****************************************************************************
//
//   File Description:
//
//    Implement displacement mapping
//    For further informations, see http://en.wikipedia.org/wiki/Displacement_mapping
//    or http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter08.html
//
//
//
//
//
//
//
//
// ****************************************************************************
// This file may be used in accordance with the terms and conditions contained
// in the Tao Presentations license agreement, or alternatively, in a signed
// license agreement between you and Taodyne SAS.
//  (C) 2011 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2011 Jérôme Forissier <jerome@taodyne.com>
//  (C) 2011 Catherine Burvelle <cathy@taodyne.com>
//  (C) 2011 Taodyne SAS
// ****************************************************************************


// ----------------------------------------------------------------------------
//   DISPLACEMENT MAPPING
// ----------------------------------------------------------------------------

// Define displacement ratio
DISPLACEMENT_RATIO -> 0.0

displacement_mapping ratio:real ->
    /**
    * Apply displacement mapping.
    **/
    has_color_map
    DISPLACEMENT_RATIO := ratio
    if SHADER4_AVAILABLE_MAPPING = false then
        displacement_shader_no_lights
    else
        displacement_shader_lights

displacement_shader_lights ->
    /**
    * Define displacement shader with a full support of lights.
    **/
    shader_program
        shader_log
        vertex_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/

            // Mapping paramaters
            uniform float     ratio;
            uniform sampler2D displacementMap;

            varying vec3 viewDir;
            varying vec3 normal;
            varying vec4 color;
            void main()
            {
               vec4 newPos, dv;
               float df;

               // Compute texture coordinates
               gl_TexCoord[0] = gl_TextureMatrix[0] *  gl_MultiTexCoord0;
               gl_TexCoord[1] = gl_TextureMatrix[1] *  gl_MultiTexCoord1;
               gl_TexCoord[2] = gl_TextureMatrix[2] *  gl_MultiTexCoord2;

               // Calculate new vertex position according to its normal and its texture coordinates
               dv     = texture2D( displacementMap, gl_TexCoord[1].st );
               df     = 0.30 * dv.x + 0.59 * dv.y + 0.11 * dv.z;
               newPos = vec4(df * ratio * gl_Normal, 0.0) + gl_Vertex;

               // Compute position
               gl_Position = gl_ModelViewProjectionMatrix * newPos;

               // Compute world position and normal
               normal  = gl_NormalMatrix * gl_Normal;
               viewDir = -vec3(gl_ModelViewMatrix * gl_Vertex);

               // Compute clip vertex (#3492)
               gl_ClipVertex = gl_ModelViewMatrix * gl_Vertex;

               color = gl_Color;
            }
        >>
        fragment_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/

            #extension GL_EXT_gpu_shader4 : require

            uniform int       lights;
            uniform bool      hasColorMap;
            uniform sampler2D colorMap;
            uniform sampler2D normalMap;

            varying vec3 viewDir;
            varying vec3 normal;
            varying vec4 color;

            /**
            * Calculate tangent space matrix from normal, vector in plane
            * and texture coordinates.
            **/
            mat3 computeTangentFrame(vec3 normal, vec3 position, vec2 texCoord)
            {
                // Compute derivatives
                vec3 dpx = dFdx(position);
                vec3 dpy = dFdy(position);
                vec2 dtx = dFdx(texCoord);
                vec2 dty = dFdy(texCoord);

                // Compute tangent and binormal
                vec3 tangent  = normalize(dpy * dtx.t - dpx * dty.t);
                vec3 binormal = cross(tangent, normal);

                return mat3(tangent, binormal, normal);
            }

            /**
            * Compute render color according to materials,
            * lights and colors parameters which are
            * set in the current scene.
            **/
            vec4 computeRenderColor(vec4 renderColor)
            {
                vec4 lighting_color = renderColor;
                if(lights > 0)
                {
                    // Define a maximum of lights supported
                    int MAX_LIGHTS = 8;

                    // Normalize vectors
                    vec3 N = normalize(normal);
                    vec3 V = normalize(viewDir);

                    // Compute bump coefficient according to normal map
                    vec3 bump = normalize(texture2D(normalMap, gl_TexCoord[2].st).xyz * 2.0 - 1.0);

                    // Calculate tangent space matrix
                    mat3 TBN = computeTangentFrame(N, V, gl_TexCoord[2].st);

                    // Define new normal
                    N = TBN * bump;

                    vec4 ambient  = vec4(0.0);
                    vec4 diffuse  = vec4(0.0);
                    vec4 specular = vec4(0.0);
                    ambient = gl_FrontLightModelProduct.sceneColor
                            * gl_FrontMaterial.ambient;

                    // Compute render for each enabled lights
                    for(int i = 0; i < MAX_LIGHTS; i++)
                    {
                        if(bool(lights & (1 << i)))
                        {
                            vec3 L = normalize(gl_LightSource[i].position.xyz);

                            // Compute ambient part
                            ambient += gl_LightSource[i].ambient * gl_FrontMaterial.ambient;

                            // Diffuse coefficient
                            float nDotL = max(clamp(dot(L, N), 0.0, 1.0), 0.0);
                            if (nDotL > 0.0)
                            {
                                // Compute diffuse part
                                diffuse += gl_LightSource[i].diffuse
                                         * gl_FrontMaterial.diffuse
                                         * nDotL;

                                // Compute specular coefficient
                                float nDotV = clamp(dot(reflect(-L, N), V), 0.0, 1.0);
                                if (nDotV > 0.0)
                                {
                                    // Compute specular part
                                    specular += gl_LightSource[i].specular
                                              * gl_FrontMaterial.specular
                                              * pow(nDotV, gl_FrontMaterial.shininess);
                                }
                            }
                        }
                    }

                     // Define new render color
                    lighting_color = (ambient + diffuse) * renderColor + specular;
                }
                else
                {
                    lighting_color = renderColor * color;
                }

                return lighting_color;
            }

            void main()
            {
                vec4 mainColor = vec4(1.0);

                // Check if there is really a color map
                if(hasColorMap)
                    mainColor = texture2D(colorMap, gl_TexCoord[0].st);

                gl_FragColor = computeRenderColor(mainColor);
            }
        >>
    shader_set colorMap        := 0                  // Unit of the color map
    shader_set displacementMap := 1                  // Unit of the displacement map
    shader_set normalMap       := 2                  // Unit of the normal map
    shader_set ratio           := DISPLACEMENT_RATIO // Ratio of the displacement
    shader_set lights          := lights_mask        // Bitmask of all enabled lights
    shader_set hasColorMap     := HAS_COLOR_MAP      // Check if there is a color map


displacement_shader_no_lights ->
    /**
    * Define displacement shader with no lights supported.
    * This is needed in case where GL_EXT_gpu_shader4 is not available.
    **/
    shader_program
        shader_log
        vertex_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            // Mapping paramaters
            uniform float     ratio;
            uniform sampler2D displacementMap;

            varying vec4 color;
            void main()
            {
               vec4 newPos, dv;
               float df;

               // Compute texture coordinates
               gl_TexCoord[0] = gl_TextureMatrix[0] *  gl_MultiTexCoord0;
               gl_TexCoord[1] = gl_TextureMatrix[1] *  gl_MultiTexCoord1;

               // Calculate new vertex position according to its normal and its texture coordinates
               dv     = texture2D( displacementMap, gl_TexCoord[1].st );
               df     = 0.30 * dv.x + 0.59 * dv.y + 0.11 * dv.z;
               newPos = vec4(df * ratio * gl_Normal, 0.0) + gl_Vertex;

               // Compute position
               gl_Position = gl_ModelViewProjectionMatrix * newPos;

               color = gl_Color;
            }
        >>
        fragment_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            uniform bool      hasColorMap;
            uniform sampler2D colorMap;

            varying vec4 color;
            void main()
            {
               // Get color map
               vec4 mainColor = texture2D(colorMap, gl_TexCoord[0].xy);

               // Check if there is really a color map
               if(hasColorMap)
                   mainColor *= color;
               else
                   mainColor  = color;

               gl_FragColor = mainColor;
            }
        >>
    shader_set colorMap        := 0                  // Unit of the color map
    shader_set displacementMap := 1                  // Unit of the displacement map
    shader_set ratio           := DISPLACEMENT_RATIO // Ratio of the displacement
    shader_set hasColorMap     := HAS_COLOR_MAP      // Check if there is a color map

// ****************************************************************************
//  noise_mapping.xl                                                Tao project
// ****************************************************************************
//
//   File Description:
//
//    Implement noise mapping
//    For further informations, see http://en.wikipedia.org/wiki/Image_noise
//
//
//
//
//
//
//
//
// ****************************************************************************
// This file may be used in accordance with the terms and conditions contained
// in the Tao Presentations license agreement, or alternatively, in a signed
// license agreement between you and Taodyne SAS.
//  (C) 2011 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2011 Jérôme Forissier <jerome@taodyne.com>
//  (C) 2011 Catherine Burvelle <cathy@taodyne.com>
//  (C) 2011 Taodyne SAS
// ****************************************************************************

noise_mapping_license_check -> check_impress_or_license "Mapping 1.006"

// ----------------------------------------------------------------------------
//   NOISE MAP
// ----------------------------------------------------------------------------

NOISE_SEED -> 0
NOISE_SEED := 0

noise_map w:integer, h:integer, s:integer ->
    /**
    * Generate a random noise image.
    **/
    rotatex 0.05
    rotatex -0.05
    noise_mapping_license_check
    color "white"
    frame_texture w, h,
        color "white"
        NOISE_SEED := s
        generate_noise
        rectangle 0, 0, w, h

generate_noise ->
    /**
    * Generate noise effect.
    **/
    shader_program
        shader_log
        vertex_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/

            varying vec4 color;
            void main()
            {
               gl_TexCoord[0] = gl_Vertex;
               gl_Position    = ftransform();
            }
        >>
        fragment_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/

            #extension GL_EXT_gpu_shader4 : require
            uniform int seed;

            // Pseudo random number base generator use to make noise
            float noise(vec2 v)
            {
                int n;
                n = int(v.x * 40.0 + v.y * 6400.0);
                n = (n << 13) ^ n;

                return float( (n * (n * n * 15731 * seed + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0;
            }

            void main()
            {
                float noiseColor = (noise(gl_TexCoord[0].st)) * 0.5;
                gl_FragColor     = vec4(noiseColor, noiseColor, noiseColor, 1.0);
            }
        >>
    shader_set seed := NOISE_SEED // Distribution of the noise

// -------------------------------------------------------------------------------------------------------------------
//   NOISE MAPPING
// -------------------------------------------------------------------------------------------------------------------

// Define noise ratio
NOISE_RATIO -> 0.0
NOISE_RATIO := 0.0

noise_mapping n->
    /**
    * Apply noise mapping.
    **/
    NOISE_RATIO := n
    noise_mapping_license_check
    if SHADER4_AVAILABLE_MAPPING = false then
        noise_shader_no_lights
    else
        noise_shader_lights

noise_shader_lights ->
    /**
    * Define noise shader with a full support of lights.
    **/
    shader_program
        shader_log
        vertex_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            varying vec3 viewDir;
            varying vec3 normal;
            varying vec4 color;
            void main()
            {
                // Compute position
                gl_Position    = ftransform();

                // Compute texture coordinates
                gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
                gl_TexCoord[1] = gl_TextureMatrix[1] * gl_MultiTexCoord1;
                gl_TexCoord[2] = gl_TextureMatrix[2] * gl_MultiTexCoord2;

                // Compute world position and normal
                normal  = gl_NormalMatrix * gl_Normal;
                viewDir = -vec3(gl_ModelViewMatrix * gl_Vertex);

                color = gl_Color;
            }
        >>
        fragment_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            #extension GL_EXT_gpu_shader4 : require

            // Mapping parameters
            uniform float     ratio;
            uniform sampler2D colorMap;
            uniform sampler2D noiseMap;
            uniform sampler3D noiseMap3D;
            uniform int lights;

            varying vec3 viewDir;
            varying vec3 normal;
            varying vec4 color;
            /**
            * Compute render color according to materials,
            * lights and colors parameters which are
            * set in the current scene.
            **/
            vec4 computeRenderColor(vec4 renderColor)
            {
                vec4 lighting_color = renderColor;
                if(lights > 0)
                {
                    // Define a maximum of lights supported
                    int MAX_LIGHTS = 8;

                    vec3 N = normalize(normal);
                    vec3 V = normalize(viewDir);

                    vec4 ambient  = vec4(0.0);
                    vec4 diffuse  = vec4(0.0);
                    vec4 specular = vec4(0.0);
                    ambient = gl_FrontLightModelProduct.sceneColor
                            * gl_FrontMaterial.ambient;

                    for(int i = 0; i < MAX_LIGHTS; i++)
                    {
                        if(bool(lights & (1 << i)))
                        {
                            vec3 L = normalize(gl_LightSource[i].position.xyz);

                            // Compute ambient part
                            ambient += gl_LightSource[i].ambient
                                     * gl_FrontMaterial.ambient;

                            // Diffuse coefficient
                            float nDotL = max(clamp(dot(L, N), 0.0, 1.0), 0.0);
                            if (nDotL > 0.0)
                            {
                                // Compute diffuse part
                                diffuse += gl_LightSource[i].diffuse
                                         * gl_FrontMaterial.diffuse
                                         * nDotL;

                                // Compute specular coefficient
                                float nDotV = clamp(dot(reflect(-L, N), V), 0.0, 1.0);
                                if (nDotV > 0.0)
                                {
                                    // Compute specular part
                                    specular += gl_LightSource[i].specular
                                              * gl_FrontMaterial.specular
                                              * pow(nDotV, gl_FrontMaterial.shininess);
                                }
                            }
                        }
                    }

                     // Define new render color
                    lighting_color  = (ambient + diffuse) * renderColor + specular;
                }
                else
                {
                    lighting_color = renderColor * color;
                }

                return lighting_color;
            }

            void main()
            {
                // Get noise value from noise map.
                vec4 noise = texture3D(noiseMap3D, gl_TexCoord[2].xyz );

                if(noise.r == 0.0 && noise.g == 0.0 && noise.b == 0.0)
                    noise = texture2D(noiseMap, gl_TexCoord[1].xy );

                // Compute noise coordinates
                vec2 noiseCoord = gl_TexCoord[0].st + vec2( noise.r * 0.065, -noise.g * 0.025 ) *  ratio / 10.0;

                vec4 renderColor = texture2D(colorMap, noiseCoord);

                gl_FragColor = computeRenderColor(renderColor);
            }
        >>
    shader_set colorMap   := 0           // Unit of the color map
    shader_set noiseMap   := 1           // Unit of the noise map 2D
    shader_set noiseMap3D := 2           // Unit of the noise map 3D
    shader_set ratio      := NOISE_RATIO // Ratio of noise
    shader_set lights     := lights_mask // Bitmask of all enabled lights


noise_shader_no_lights ->
    /**
    * Define noise shader with no lights supported.
    * This is needed in case where GL_EXT_gpu_shader4 is not available.
    **/
    shader_program
        shader_log
        vertex_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            varying vec4 color;
            void main()
            {
                // Compute position
                gl_Position    = ftransform();

                // Compute texture coordinates
                gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
                gl_TexCoord[1] = gl_TextureMatrix[1] * gl_MultiTexCoord1;

                color = gl_Color;
            }
        >>
        fragment_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            // Mapping parameters
            uniform float     ratio;
            uniform sampler2D colorMap;
            uniform sampler2D noiseMap;
            uniform sampler3D noiseMap3D;

            varying vec4 color;
            void main()
            {
                // Get noise value from noise map.
                vec4 noise = texture2D(noiseMap, gl_TexCoord[1].st );

                if(noise.r == 0.0 && noise.g == 0.0 && noise.b == 0.0)
                    noise = texture3D(noiseMap3D, gl_TexCoord[1].str );

                // Compute noise coordinates
                vec2 noiseCoord = gl_TexCoord[0].st + vec2( noise.r * 0.065, -noise.g * 0.025 ) *  ratio / 10.0;

                // Apply noise coordinates to color map
                gl_FragColor = texture2D(colorMap, noiseCoord ) * color;
            }
        >>
    shader_set colorMap   := 0            // Unit of the color map
    shader_set noiseMap   := 1            // Unit of the noise map 2D
    shader_set noiseMap3D := 1            // Unit of the noise map 3D
    shader_set ratio      := NOISE_RATIO  // Ratio of noise

// ****************************************************************************
//  mapping.tbl                                                     Tao project
// ****************************************************************************
//
//   File Description:
//
//     Definition of the interface between XLR and native code
//     for the "Mapping" module.
//
//
//
//
//
//
//
// ****************************************************************************
// This software is licensed under the GNU General Public License v3.
// See file COPYING for details.
//  (C) 1992-2010 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2010 Jérôme Forissier <jerome@taodyne.com>
//  (C) 2010 Catherine Burvelle <cathy@taodyne.com>
//  (C) 2010 Lionel Schaffhauser <lionel@taodyne.com>
//  (C) 2010 Taodyne SAS
// ****************************************************************************

// ----------------------------------------------------------------------------
//   MAPPING PARAMETERS
// ----------------------------------------------------------------------------

PREFIX(CubeMap,  tree, "cube_map",
       PARM(size, integer, )
       PARM(p, code, "The program that represent a cube map"),
       return cube_map(context, size, self, p),
       GROUP(module.Mapping)
       SYNOPSIS("Generate a cube map")
       DESCRIPTION("Generate a cube map."))

PREFIX(CubeFace,  tree, "cube_map_face",
       PARM(face, integer, )
       PARM(name, text, ),
       return cube_map_face(self, face, name),
       GROUP(module.Mapping)
       SYNOPSIS("Add a texture to a face of the cube map")
       DESCRIPTION("Add a texture to a face of the cube map."))

PREFIX(CubeFaceFlip,  tree, "cube_map_flip",
       PARM(u, boolean, )
       PARM(v, boolean, ),
       return cube_map_flip(self, u, v),
       GROUP(module.Mapping)
       SYNOPSIS("Flip u and v coordinates of following faces")
       DESCRIPTION("Flip u and v coordinates of following faces."))


PREFIX(CubeMapping,  tree, "cube_mapping",
       PARM(r, real, ),
       return cube_mapping(self, r),
       GROUP(module.Mapping)
       SYNOPSIS("Apply cube mapping")
       DESCRIPTION("Apply cube mapping."))


PREFIX(SphereMapping,  tree, "sphere_mapping",
       PARM(r, real, ),
       return sphere_mapping(self, r),
       GROUP(module.Mapping)
       SYNOPSIS("Apply sphere mapping")
       DESCRIPTION("Apply sphere mapping."))


PREFIX(NoiseMap3D,  tree, "noise_map_3D",
       PARM(w, integer, )
       PARM(h, integer, )
       PARM(seed, integer, ),
       return noise_map_3D(self, w, h, seed),
       GROUP(module.Mapping)
       SYNOPSIS("Generate a 3D noise map")
       DESCRIPTION("Generate a 3D noise map"))

// ****************************************************************************
//  normal_mapping.xl                                               Tao project
// ****************************************************************************
//
//   File Description:
//
//    Implement normal mapping
//    For further informations, see http://en.wikipedia.org/wiki/Normal_mapping
//
//
//
//
//
//
//
//
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
//  (C) 2011 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2011 Jérôme Forissier <jerome@taodyne.com>
//  (C) 2011 Catherine Burvelle <cathy@taodyne.com>
//  (C) 2011 Taodyne SAS
// ****************************************************************************

normal_mapping_license_ok ->
    if check_impress_or_license "Mapping 1.004" then
        true
    else
        if blink (1.0, 1.0, 300.0) then
           true
        else
           false

// -------------------------------------------------------------------------------------------------------------------
//   NORMAL MAP
// -------------------------------------------------------------------------------------------------------------------

normal_map ->
    /**
    * Convert the current texture into a basic normal map.
    **/
    rotatex 0.05
    rotatex -0.05

    CODE -> normal_map_shader
    TEXTURE_WIDTH := texture_width
    TEXTURE_HEIGHT := texture_height
    TEXTURE_ID := texture
    if normal_mapping_license_ok then
        frame_texture TEXTURE_WIDTH, TEXTURE_HEIGHT,
            color "white"
            texture TEXTURE_ID
            normal_map_shader
            rectangle 0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT


normal_map_shader ->
    /**
    * Define normal map shader.
    **/
    shader_program
        vertex_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            void main()
            {
                // Compute position
                gl_Position = ftransform();

                gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
            }
        >>
        fragment_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            uniform float     width;
            uniform float     height;
            uniform sampler2D colorMap;

            void main()
            {
                float strength  = 12.0;

                // Size of a pixel
                float pixel_w = 1.0 / width;
                float pixel_h = 1.0 / height;

                // Compute offset
                vec2 offset[8];
                offset[0] = vec2(-pixel_w, -pixel_h);
                offset[1] = vec2(-pixel_w, 0.0);
                offset[2] = vec2(-pixel_w, pixel_h);

                offset[3] = vec2(0.0, -pixel_h);
                offset[4] = vec2(0.0, pixel_h);
                offset[5] = vec2(pixel_w, -pixel_h);

                offset[6] = vec2(pixel_w, 0.0);
                offset[7] = vec2(pixel_w, pixel_h);

                float tl = abs(texture2D(colorMap, gl_TexCoord[0].st + offset[0]).x);   // top left
                float  l = abs(texture2D(colorMap, gl_TexCoord[0].st + offset[1]).x);   // left
                float bl = abs(texture2D(colorMap, gl_TexCoord[0].st + offset[2]).x);   // bottom left

                float  t = abs(texture2D(colorMap, gl_TexCoord[0].st + offset[3]).x);   // top
                float  b = abs(texture2D(colorMap, gl_TexCoord[0].st + offset[4]).x);   // bottom
                float tr = abs(texture2D(colorMap, gl_TexCoord[0].st + offset[5]).x);   // top right

                float  r = abs(texture2D(colorMap, gl_TexCoord[0].st + offset[6]).x);   // right
                float br = abs(texture2D(colorMap, gl_TexCoord[0].st + offset[7]).x);   // bottom right

                // Compute dx using Sobel:
                //           -1 0 1
                //           -2 0 2
                //           -1 0 1
                float dX = tr + 2.0 * r + br -tl - 2.0 * l - bl;

                // Compute dy using Sobel:
                //           -1 -2 -1
                //            0  0  0
                //            1  2  1
                float dY = bl + 2.0 * b + br -tl - 2.0 * t - tr;

                vec4 normal = vec4(normalize(vec3(dX, 1.0 / strength, dY)), 1.0) * 0.3 + 0.4;
                gl_FragColor = normal + vec4(0.0, 0.0, 0.8, 1.0);
            }
        >>
    shader_set colorMap := texture_unit   // Unit of the texture to filter
    shader_set width    := TEXTURE_WIDTH  // Width of the color map
    shader_set height   := TEXTURE_HEIGHT // Height of the color map

// -------------------------------------------------------------------------------------------------------------------
//   NORMAL MAPPING
// -------------------------------------------------------------------------------------------------------------------

normal_mapping ->
    /**
    * Apply normal mapping.
    **/
    has_color_map
    if normal_mapping_license_ok then
        if SHADER4_AVAILABLE_MAPPING = false then
            normal_shader_no_lights
        else
            normal_shader_lights

normal_shader_lights ->
    /**
    * Define normal shader with a full support of lights.
    **/
    shader_program
        shader_log
        vertex_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            varying vec3 viewDir;
            varying vec3 normal;
            varying vec4 color;
            void main()
            {
                // Determine object parameters
                gl_Position    = ftransform();

                // Compute texture coordinates
                gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
                gl_TexCoord[1] = gl_TextureMatrix[1] * gl_MultiTexCoord1;

                // Compute world position and normal
                normal  = gl_NormalMatrix * gl_Normal;
                viewDir = -vec3(gl_ModelViewMatrix * gl_Vertex);

                color = gl_Color;
            }
        >>
        fragment_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
             #extension GL_EXT_gpu_shader4 : require

            // Mapping paramaters
            uniform sampler2D colorMap;
            uniform sampler2D normalMap;
            uniform int       lights;
            uniform bool      hasColorMap;

            varying vec3 viewDir;
            varying vec3 normal;
            varying vec4 color;
            /**
            * Calculate tangent space matrix from normal, vector in plane
            * and texture coordinates.
            **/
            mat3 computeTangentFrame(vec3 normal, vec3 position, vec2 texCoord)
            {
                // Compute derivatives
                vec3 dpx = dFdx(position);
                vec3 dpy = dFdy(position);
                vec2 dtx = dFdx(texCoord);
                vec2 dty = dFdy(texCoord);

                // Compute tangent and binormal
                vec3 tangent  = normalize(dpy * dtx.t - dpx * dty.t);
                vec3 binormal = cross(tangent, normal);

                return mat3(tangent, binormal, normal);
            }

            /**
            * Compute render color according to materials,
            * lights and colors parameters which are
            * set in the current scene.
            **/
            vec4 computeRenderColor(vec3 N, vec3 V, vec4 renderColor)
            {
                vec4 lighting_color;
                if(lights > 0)
                {
                    // Define a maximum of lights supported
                    int MAX_LIGHTS = 8;

                    vec4 ambient  = vec4(0.0);
                    vec4 diffuse  = vec4(0.0);
                    vec4 specular = vec4(0.0);
                    ambient  = gl_FrontLightModelProduct.sceneColor
                             * gl_FrontMaterial.ambient;

                    // Compute render for each enabled lights
                    for(int i = 0; i < MAX_LIGHTS; i++)
                    {
                        if(bool(lights & (1 << i)))
                        {
                            vec3 L = normalize(gl_LightSource[i].position.xyz);

                            // Compute ambient part
                            ambient += gl_LightSource[i].ambient
                                     * gl_FrontMaterial.ambient;

                            // Diffuse coefficient
                            float nDotL = max(clamp(dot(L, N), 0.0, 1.0), 0.0);
                            if (nDotL > 0.0)
                            {
                                // Compute diffuse part
                                diffuse += gl_LightSource[i].diffuse * gl_FrontMaterial.diffuse * nDotL;

                                // Compute specular coefficient
                                float nDotV = clamp(dot(reflect(-L, N), V), 0.0, 1.0);
                                if (nDotV > 0.0)
                                {
                                    // Compute specular part
                                    specular += gl_LightSource[i].specular
                                              * gl_FrontMaterial.specular
                                              * pow(nDotV, gl_FrontMaterial.shininess);
                                }
                            }
                        }
                    }

                     // Define new render color
                    lighting_color  = (ambient + diffuse) * renderColor + specular;
                }
                else
                {
                    // In case where there is no light, we define a unique light
                    // with a simple material to increse the render of this mapping
                    vec4 ambient  = vec4(0.0);
                    vec4 diffuse  = vec4(0.0);
                    vec4 specular = vec4(0.0);

                    vec3 L = normalize(vec3(0.0, 0.0, 50));

                    // Compute ambient part
                    ambient = vec4(0.0, 0.0, 0.0, 1.0);

                    // Diffuse coefficient
                    float nDotL = max(clamp(dot(L, N), 0.0, 1.0), 0.0);
                    if (nDotL > 0.0)
                    {
                        // Compute diffuse part
                        diffuse = vec4(1.0, 1.0, 1.0, 1.0) * nDotL;

                        // Compute specular coefficient
                        float nDotV = clamp(dot(reflect(-L, N), V), 0.0, 1.0);
                        if (nDotV > 0.0)
                        {
                            // Compute specular part
                            specular += vec4(0.3, 0.3, 0.3, 1.0) * pow(nDotV, 70.0);
                        }
                    }

                     // Define new render color
                    lighting_color  = (ambient + diffuse) * renderColor + specular;
                }

                return lighting_color;
            }

            void main()
            {
                // Normalize vectors
                vec3 n = normalize(normal);
                vec3 v = normalize(viewDir);

                // Compute bump coefficient according to normal map
                vec3 bump = normalize(texture2D(normalMap, gl_TexCoord[1].st).xyz * 2.0 - 1.0);

                // Calculate tangent space matrix
                mat3 TBN = computeTangentFrame(n, v, gl_TexCoord[1].st);

                // Define new normal
                n = TBN * bump;

                // Get color map
                vec4 renderColor = texture2D(colorMap, gl_TexCoord[0].st);

                // Check if there is really a color map
                if(hasColorMap)
                    renderColor *= color;
                else
                    renderColor  = color;

                gl_FragColor = computeRenderColor(n, v, renderColor);
            }
        >>
    shader_set colorMap    := 0             // Unit of the color map
    shader_set normalMap   := 1             // Unit of the normal map
    shader_set lights      := lights_mask   // Bitmask with enabled lights
    shader_set hasColorMap := HAS_COLOR_MAP // Check if a color map is bound


normal_shader_no_lights ->
    /**
    * Define normal shader with no support of lights.
    * This is needed in case where GL_EXT_gpu_shader4 is not available.
    **/
    shader_program
        shader_log
        vertex_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            varying vec3 viewDir;
            varying vec3 normal;
            varying vec4 color;
            void main()
            {
                // Determine object parameters
                gl_Position    = ftransform();

                // Compute texture coordinates
                gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
                gl_TexCoord[1] = gl_TextureMatrix[1] * gl_MultiTexCoord1;

                // Compute world position and normal
                normal  = gl_NormalMatrix * gl_Normal;
                viewDir = -vec3(gl_ModelViewMatrix * gl_Vertex);

                color = gl_Color;
            }
        >>
        fragment_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            // Mapping paramaters
            uniform bool      hasColorMap;
            uniform sampler2D colorMap;
            uniform sampler2D normalMap;

            varying vec3 viewDir;
            varying vec3 normal;
            varying vec4 color;
            /**
            * Calculate tangent space matrix from normal, vector in plane
            * and texture coordinates.
            **/
            mat3 computeTangentFrame(vec3 normal, vec3 position, vec2 texCoord)
            {
                // Compute derivatives
                vec3 dpx = dFdx(position);
                vec3 dpy = dFdy(position);
                vec2 dtx = dFdx(texCoord);
                vec2 dty = dFdy(texCoord);

                // Compute tangent and binormal
                vec3 tangent  = normalize(dpy * dtx.t - dpx * dty.t);
                vec3 binormal = cross(tangent, normal);

                return mat3(tangent, binormal, normal);
            }

            /**
            * Compute render color according to materials, lights and colors parameters
            * which are set in the current scene.
            **/
            vec4 computeRenderColor(vec3 N, vec3 V, vec4 renderColor)
            {
                vec4 lighting_color;

                // In case where there is no light, we define a unique light
                // with a simple material to increse the render of this mapping
                vec4 ambient  = vec4(0.0);
                vec4 diffuse  = vec4(0.0);
                vec4 specular = vec4(0.0);

                vec3 L = normalize(vec3(0.0, 0.0, 50));

                // Compute ambient part
                ambient = vec4(0.0, 0.0, 0.0, 1.0);

                // Diffuse coefficient
                float nDotL = max(clamp(dot(L, N), 0.0, 1.0), 0.0);
                if (nDotL > 0.0)
                {
                    // Compute diffuse part
                    diffuse = vec4(1.0, 1.0, 1.0, 1.0) * nDotL;

                    // Compute specular coefficient
                    float nDotV = clamp(dot(reflect(-L, N), V), 0.0, 1.0);
                    if (nDotV > 0.0)
                    {
                        // Compute specular part
                        specular += vec4(0.3, 0.3, 0.3, 1.0) * pow(nDotV, 70.0);
                    }
                }

                 // Define new render color
                lighting_color  = (ambient + diffuse) * renderColor + specular;
                return lighting_color;
            }

            void main()
            {
                // Normalize vectors
                vec3 n = normalize(normal);
                vec3 v = normalize(viewDir);

                // Compute bump coefficient according to normal map
                vec3 bump = normalize(texture2D(normalMap, gl_TexCoord[1].st).xyz * 2.0 - 1.0);

                // Calculate tangent space matrix
                mat3 TBN = computeTangentFrame(n, v, gl_TexCoord[1].st);

                // Define new normal
                n = TBN * bump;

                // Get color map
                vec4 renderColor = texture2D(colorMap, gl_TexCoord[0].st);

                // Check if there is really a color map
                if(hasColorMap)
                    renderColor *= color;
                else
                    renderColor  = color;
                gl_FragColor = computeRenderColor(n, v, renderColor);
            }
        >>
    shader_set colorMap    := 0             // Unit of the color map
    shader_set normalMap   := 1             // Unit of the normal map
    shader_set hasColorMap := HAS_COLOR_MAP // Check if a color map is bound
